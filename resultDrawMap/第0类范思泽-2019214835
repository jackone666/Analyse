// 导图
digraph {
	node [fontname=FANGSONG]
	edge [arrowhead=empty splines=spline style=dashed]
	"新建节点" -> "第5章 选择结构程序设计\n5.1.C逻辑值为短整数(int)，真、假分别为1、0。另外，字符、数、指针作为逻辑量时，非0、非空为真(即1)，0、空为假(即0)。逻辑运算如下表所示：\n表5.1 逻辑运算真值表\n左元 右元 !右元 左元&&右元 左元||右元\n假(0) 假(0) 真(1) 假(0) 假(0)\n假(0) 真(非0) 假(0) 假(0) 真(1)\n真(非0) 假(0) 真(1) 假(0) 真(1)\n真(非0) 真(非0) 假(0) 真(1) 真(1)\n5.2.对于形如\n□||□||…\n的逻辑式，从左至右计算□的逻辑值，遇到真则提前终止。\n5.3.对于形如\n□&&□&&…\n的逻辑式，从左至右计算□的逻辑值，遇到假则提前终止。\n5.4.算术、关系、逻辑运算的优先级参见附录C（教材第365页）。\n5.5.if语句的格式和功能如下：\n(1)格式一：if(条件) 语句\n功能：如果条件成立，方执行语句。\n(2)格式二：if(条件)语句1 else 语句2\n功能 如果条件成立，执行语句1，否则执行语句2。\n注意：else不可独立使用，它与其前最近一个尚未配对的if配对，为避免歧义，通常只在else中嵌套if语句。\n5.6.条件表达式的格式和功能如下：\n格式：条件?表达式1":"表达式2\n功能：如果条件成立，取表达式1的值，否则取表达式2的值。\n说明：条件表达式可以嵌套，与其前最近一个尚未配对的if配对。" [fontname="Microsoft YaHei"]
	"新建节点" -> "第9章 预处理命令\n9.1.预处理命令在程序编译前执行，其主要功能是“文本置换”。\n9.2.不带参数宏定义的格式和功能如下：\n格式：#define 宏名 文本\n功能：在预处理时，将程序中宏名用相应的文本置换。\n9.3.带参数宏定义的格式和功能如下：\n格式：#define 宏名(形参表列) 文本\n功能：在预处理时，将程序中带参数的宏用相应的文本置换，且文本中的形参被相应的实参所置换。\n注意：形参无须且做类型声明。\n9.4.终止宏定义的格式如下：\n格式 #undef 宏名\n9.5.宏定义可以引用已有的宏，亦可重新定义所代表的文本。\n9.6.预处理命令无须以分号结尾，否则分号也参与置换。\n9.7.#include命令的格式和功能如下：\n格式一：#include “文件名”\n格式二：#include <文件名>\n功能：在预处理时，用指定文件置换本命令——加载文件。置换后，被包含文件成为本文件的一部分，其函数、全局变量等均可在本文件中直接使用，无须作extern声明。前一种格式先在当前目录中找指定文件，如果未找到，方到存放C头文件的目录中查找。后一种格式直接到存放C头文件的目录中查找指定文件。\n9.8.条件编译命令的格式和功能如下：\n格式一：#ifdef 宏名 程序段1 #else 程序段2 #endif\n功能：在预处理时，如果指定的宏名已定义，则用程序段1置换本命令，否则用程序段2置换本命令。当程序段2为空时，#else可省略(下同)。\n格式二：#ifndef 宏名 程序段1 #else 程序段2 #endif\n功能：在预处理时，如果指定的宏名未定义，则用程序段1置换本命令，否则用程序段2置换本命令。\n格式三：#if 常量表达式 程序段1 #else 程序段2 #endif\n功能：在预处理时，如果指定常量表达式的值为真(非0)，则用程序段1置换本命令，否则用程序段2置换本命令。\n9.9.注释命令在预处理时被删除，不影响源程序和目标程序。注释命令的格式如下：\n/注释内容/" [fontname="Microsoft YaHei"]
	"新建节点" -> "第7章 数组\n7.1.同一类型数据的序列称作数组，数组中数据用相应下标变量访问，因此，数组亦可视为由下标变量组成的序列。\n7.2.定义数组语句的一般格式和功能为：\n格式：数据类型名 数组名[第1维长度]…[第n维长度]\n功能：为数组分配连续内存单元，用于存储数组中的下标变量(低维优先)，并将起始地址(又称基址)赋给数组名。\n说明：数组长度只能为整型常量或整型常量表达式。\n7.3.数组的要素有：数据类型、数组名、维数及各维的长度。各维的长度必须是常量，可用常量表达式表示，其值的整数位有效——截断取整。\n7.4.下标变量的格式为：\n数组名[第1维下标]…[第n维下标]\n7.5.下标从0开始，可用表达式表示，其值的整数位有效。下标最大值比长度小1。\n7.6.下标变量的使用与普通变量相同。\n7.7.定义数组的同时可对数组中的下标变量赋初值。\n格式：数据类型名 数组名[第1维长度]…[第n维长度]={数据表}\n功能：定义数组的同时将数据表中数据依次赋给数组中下标变量，未赋值下标变量的初值为相应数据类型的0。\n说明：数据表中的数据必须是常量，可用表达式表示。第1维长度可省略，如果省略，其长度由数据表和其它维长度确定——存储所需的最小长度。\n7.8.以字符为数据元素的数组称作字符数组，它由一组字符型下标变量组成。除赋值外，字符数组名的使用与字符串变量相似。字符数组也可用字符串初始化。\n7.9.标准函数库提供许多用于处理字符串的函数。\n表7.1 常用字符串处理函数\n格式 功能 头文件\nputs(串) 依次输出串中字符，遇到’\\0’终止，然后换行。 stdio.h\ngets(串) 读入一行字符，依次存入所分配的内存空间，并追加’\\0’。\nstrcat(串1, 串2) 将串2复制、连接到串1的第一个’\\0’处。 string.h\nstrcpy(串1, 串2) 将串2复制到串1。\nstrcmp(串1, 串2) 比较串1和串2的大小。\nstrlen(串) 求字符串的长度。\nstrlwr(串) 将串中大写字母均转换为相应小写字母。\nstrupr(串) 将串中小写字母均转换为相应大写字母。\n注意：输出字符串及处理字符串的函数，均忽略字符串中第一个’\\0’及其后的字符。\n7.10.掌握冒泡排序。" [fontname="Microsoft YaHei"]
	"新建节点" -> "第2章 程序设计的灵魂——算法\n2.1.解决问题的方法和步骤称作算法。算法和数据结构是程序的两个主要要素。\n2.2.算法具有确定性、有穷性、有效性等特点。\n2.3.算法可用自然语言、流程图、N-S图、计算机语言、伪代码等描述。伪代码是用介于自然语言和计算机语言之间的文字和符号来描述算法。\n起止框 输入输出框 判断框\n处理框 注释框 …… 连接点 〇\n流程线 有向线段或折线\n图2.1 ANSI流程图符号\n2.4.算法的基本结构分为：顺序结构、选择结构、循环结构。\n\n\n2.5.由三种基本结构组成的程序称作结构化程序，结构化程序中的每个模块只有一个入口和一个出口。结构化程序设计通常采用“自顶向下、逐步细化”的设计方法。" [fontname="Microsoft YaHei"]
	"新建节点" -> "第4章 顺序结构程序设计\n4.1.表达式后缀分号称作表达式语句，即，\n表达式;\n4.2.putchar、getchar、printf、scanf等输入输出函数的原型在头文件stdio.h中。\n4.3.函数putchar和getchar的格式和功能如下：\n(1)putchar\n格式：putchar(表达式)\n功能：向标准输出设备输出以指定表达式的值为ASCII码的字符，并以该值为函数值(自动强制转换为int型)。\n(2)getchar\n格式：getchar()\n功能：从标准输入设备输入一个字符，并以该字符为函数值。\n注意：getchar可提取空格及回车、Tab等部分控制字符，而且只提取输入中相应位置上的一个字符，因此，输入字符间无须分隔，否则也被视为输入字符。\n4.4.printf函数的格式和功能如下：\n格式：printf(格式控制串, 输出表列)\n功能：\n(1)从右至左依次计算输出表列中各表达式的值；\n(2)从左至右依次输出格式控制串中的字符，其中，%引导的格式控制符由输出表列中相应表达式的值所取代。\n输出表列是一组用逗号分隔的表达式（又称输出项，可以为0项）。格式控制串为字符串型数据（可以是表达式）。其中，格式符用于控制输出表列中相应表达式的输出格式。格式符及其功能如下表所示：\n表4.1 printf格式字符\n格式符 说明\nd或i 有符号十进制短整数(不输出正号)\nu 无符号十进制短整数\no 无符号八进制短整数(无前缀0)\nx或X 无符号十六进制短整数(无前缀0x，数字的大小写与x相同)\nc 字符\ns 字符串\nf 定点数(默认6位小数)。\ne或E 浮点数(浮点数中e的大小写与格式符e的大小写相同)\ng或G %f和%e中输出宽度较短者(e与g的大小写相同)\n附加格式符 说明\nl 插在%和d、i、u、o、x、X之间，表示输出相应长整数。\n整数 插在%和其它格式符之间，前一个整数的绝对值为输出数据的宽度，后一个整数控制实际输出位数：①输出整数时，指定输出位数，不足左补0，超出保留；②输出实数时，指定输出小数位数，不足右补0，超出四舍五入；③输出字符串时，指定输出字符数。另外，第一个整数为负时，输出数据左对齐，否则右对齐。\n.整数\n整数.整数\n4.5.scanf函数的格式和功能如下：\n格式：scanf(格式控制串, 地址表列)\n其中，格式控制串为字符串型数据(可以是表达式)，地址表列是一组用逗号分隔的地址。\n功能：\n(1)右至左依次计算地址表列中各表达式的值；\n(2)从标准输入设备提取数据，并从左至右依次存储到所指定的存储单元。\n(3)地址表列中的地址可用表达式表示，通常形式为：\n&变量\n其中&是地址运算符，它表示取其后变量的存储(起始)地址。\n说明：\n(1)scanf函数格式符与printf函数的格式符的功能相似。scanf的合法格式符不区分大小写、实型格式符均等效，另外，\n表4.2 scanf的附加格式符说明\n附加格式符 说明\n正整数 指定输入数据的最大宽度(插在%与其它格式符之间)\n跳过当前一个数据(插在%与其它格式符之间)\n*正整数 跳过当前指定个字符(插在%与其它格式符之间)\n(2)如果格式控制串中有非格式符，则输入数据中对应位置上必须是该字符，且被跳过，这为指定数据间分隔符提供了方便。\n(3)printf和scanf格式控制串中的每对%%(从左至右结合)按一个普通字符%对待。" [fontname="Microsoft YaHei"]
	"新建节点" -> "第3章 数据类型、运算符与表达式\n3.1.C的数据类型如下所示：\n表3.1 C语言的数据类型\n数据类型 字节数 数值范围\n基本类型 整型 无符号短整型(unsigned short int) 4 0～216-1\n3.2.C符号常量名、变量名、函数名等统称标识符，标识符的命名规则为：以字母或下划线开头，由字母、数字、下划线组成，超出32个字符部分被忽略(最好不超过8个字符)。\n3.3.以0开头的整数为八进制整数，以0X或0x开头的整数为十六进制无符号整数。\n3.4.-32768～32767为int型，0U～65535U为unsigned型，65536U～4294967295U和0UL～4294967295UL为unsigned long型，-2147483648～-32769、32768～2147483647和-2147483648L～2147483647L为long型。后缀U和L不区分大小写和次序。\n3.5.数据的存储字节数可用运算符sizeof()查询，括号内可是数据、表达式或类型名。\n3.6.有符号整数(int和long)按补码存储，因此，-65535U～-1U与1U～65535U依次相等，-4294967295UL～-1UL与1UL～4294967295UL依次相等。\n3.7.定点数(含小数点数)和浮点数统称C实型常量，浮点数的一般形式为：\n尾数e除码 或 尾数E除码\n其含义为：\n尾数×10除码\n其中，尾数为定点数或整数，除码为整数。标准浮点数的小数点在第1位非0数字之后。后缀L或l的实型常量为长双精度，无后缀实型常量为双精度。\n3.8.用一对单引号括起来的单个字符称作C字符常量，其值为该字符的ASCII码（1字节无符号整数）。\n3.9.转义字符’\\n’、’\\t’、’\\’、’’’、’\"'分别表示回车符、制表符、反斜杠、单引号、双引号。\n3.10.转义字符’\\整数’、’\\x整数’（或’\\X整数’）中的整数分别为八进制、十六进制，表示以此整数为ASCII码的字符。\n3.11.用双引号括起来的一串字符称作C字符串型常量，串中字符数称作串长，可以为0。字符串的存储形式为：依次存储字符串中字符的ASCII码，并追加一个空字符’\\0’（1字节无符号整数0）。\n3.12.字符型、整型、实型数据统称数值型数据，不同类型的数值型数据可以混合运算，低精度数据被自动强制转换为高精度数据后方参与运算。另外，字符常量为有符号短整数，两个字符型数据间的运算按有符号短整数处理。\n3.13.如果将数值型数据赋给不同类型的数值型变量，则数值型数据将被自动强制转换为变量的数据类型。\n3.14.C允许定义变量的同时赋初值。\n3.15.C运算符及其优先级、结合性如附录C（教材第365页）所示。\n3.16.强制数据类型转换的一般形式为：\n(类型名)数据\n3.17.自增++、自减–运算只能作用于变量，作用于右侧时，返回变量自增、自减前的值。\n3.18.赋值表达式的格式为：\n变量=表达式 或 变量op=表达式\n其中，op为运算符 +、-、*、/、%、>>、<<、&、^、| 中某一个。前者将右边表达式的值赋给左边的变量，后者将左边变量的当前值与右边表达式的值作相应运算后仍赋给左边的变量。整个赋值表达式取左边变量所赋的新值。\n3.19.用逗号分隔的一组表达式称作逗号表达式，其一般形式为：\n表达式, 表达式, …, 表达式\n其功能为：从左至右依次计算各表达式的值，并以最后一个表达式的值为整个逗号表达式的值。\n3.20.将数学式改为C表达式时应注意：\n(1)乘号*不可省略；\n(2)正确改写脚码、运算符、括号等；\n(3)正确书写函数名；\n(4)把握好运算优先级，分数线改为/时，分子、分母相应加括号；\n(5)正确拆分不等式组；\n(6)区分整数除法和实数除法。" [fontname="Microsoft YaHei"]
	"新建节点" -> "新建节点" [fontname="Microsoft YaHei"]
	"新建节点" -> "第8章 函数\n8.1.自定义函数的格式为：\n函数值类型 函数名(带类型声明的形参表列) {函数体}\n8.2.函数值的默认数据类型为int。\n8.3.如果函数有返回值，则用return语句返回，其格式为：\nreturn 表达式; 或 return(表达式);\n8.4.如果函数无返回值，即函数值类型为void，亦可用格式：\nreturn;\n结束本函数并返回调用者。\n8.5.函数一般调用格式为：\n函数名(实参表列)\n其中，实参表列为一组逗号分隔的表达式。实参按从右至左的次序计算并传递给相应形参。\n8.6.如果函数调用在其定义之前，调用前应作相应声明，声明格式为：\n函数值类型名 函数名(形参及其类型声明表列);\n其中，形参可省略。\n8.7.函数不可嵌套定义，但允许嵌套调用，亦可直接或间接调用自身(称作递归函数)。\n8.8.递归函数的函数体的一般格式为：（B班同学不作要求）\nif(递归条件)语句1 /递归时，如何递归/\nelse 语句2 /非递归时，如何处理/\n或\nif(!递归条件)语句1 /非递归时，如何处理/\nelse 语句2 /递归时，如何递归/\n8.9.形参及函数内定义的变量称作局部变量，它从定义处生效，且只在该函数内有效。因此，不同函数中的局部变量可以同名，但同名不同义。\n8.10.在所有函数之外定义的变量称作全局变量，它从定义处生效。\n8.11.如果局部变量与全局变量同名，则同名全局变量被屏蔽。\n8.12.局部变量的存储方式分为：自动(auto，默认)、静态(static)、寄存器(register)。\n8.13.存储方式和数据类型是变量的两个重要属性，必须在定义变量时一并声明，关键字的排列顺序没有限制。变量的默认数据类型为int，默认存储方式为auto，但关键字auto和int不可同时缺省。\n8.14.auto型局部变量占用动态数据区，当函数调用结束时释放所占内存。register占用CPU中的寄存器，但寄存器不够用时，占用动态数据区。\n8.15.全局变量和static型局部变量占用静态数据区，默认初值为相应数据类型的0。\n8.16.static型局部变量的声明和初始化只执行一次。\n8.17.如果全局变量被声明为static型，则其它程序文件不能使用该全局变量。否则，其它程序文件也可使用该全局变量，但使用前应作extern声明。\n8.18.被声明为static型的函数，只在本程序文件中有效，不能被其它程序文件调用。否则，其它程序文件也可调用此函数，但调用前应作extern声明。\n8.19.常用数学函数在头文件math.h中。掌握基本初等函数。" [fontname="Microsoft YaHei"]
	"新建节点" -> "《C程序设计》知识点\n第1章 C语言概述\n1.1.C语言属高级语言，区分字母的大小写，以函数为基本单位采用模块化程序设计，可直接访问内存，进而对硬件进行操作。\n1.2.用C语言编写和程序称作C源程序，简称C程序，C程序可由若干个文本文件组成，文件扩展名为C（使用C++编译器时默认扩展名为CPP）。C源程序经编译、连接后得到扩展名为EXE的可执行文件(目标程序)。\n            预处理    编译、连接           执行\n1\n若干个C程序文件----→C程序------→目标程序文件–→\n1.3.C程序从主函数开始执行，每个C程序有且仅有一个主函数，因此，每个C程序文件中至多有一个主函数。\n1.4.C语句以分号结尾，用{}括起来的一组语句称作复合语句，复合语句可省略花括号之后的分号。\n1.5.允许一行内写多个C语句，也允许一个C语句占用多行，但保留字和标识符不可拆行。\n1.6.在C集成环境VC++ 6.0中，新建工程、保存当前程序文件、编译当前程序、执行当前程序的快捷键依次为：Ctrl+N、Ctrl+S、F7、Ctrl+F5。" [fontname="Microsoft YaHei"]
	"新建节点" -> "第6章 循环结构程序设计\n6.1.while语句的格式和功能如下：\n格式：while(表达式)循环体\n功能：当表达式的值为真时，重复执行其后循环体。\n说明：循环体是循环语句的内嵌语句，可以是空或复合语句(下同)。\n6.2.do-while语句的格式和功能如下：\n格式：do 循环体 while(表达式)\n功能：重复执行循环体，直到表达式的值为假。\n说明：do-while循环至少执行一次循环体。\n6.3.for语句的格式和功能如下：\n格式：for(表达式1; 表达式2; 表达式3) 循环体\n功能：\n(1)计算表达式1；\n(2)当表达式2的值为真时，重复执行循环体和计算表达式3。\n说明：表达式1、表达式2、表达式3均可缺省，但保留分号。\n6.4.continue语句的格式和功能如下：\n格式：continue;\n功能：跳过循环体中其后程序段(结束本次循环)。\n说明：continue语句只能用于循环。\n6.5.掌握以下算法：累加、阶乘、判断素数、分解整数数字、递推数列、打印字符图形。" [fontname="Microsoft YaHei"]
}
